// import some utilities
// assumes Atlas has the C Toolbox Commons installed 
// https://ensoftcorp.github.io/c-toolbox-commons
import com.ensoftcorp.open.commons.utilities._
import com.ensoftcorp.open.c.commons.analysis.CommonQueries._

// get callers of strcpy and strlen
var strcpy = functions("strcpy")
var strlen = functions("strlen")
var callEdges = edges(XCSG.Call)
var strcpyCallers = callEdges.predecessors(strcpy)
var strlenCallers = callEdges.predecessors(strlen)

// show a rough guess of where vulnerable functions might be
show(strcpyCallers.intersection(strlenCallers), "Callers of strcpy and strlen")
show(strcpyCallers.difference(strlenCallers), "Callers of strcpy and not strlen")

// select all array variables (variables have a TypeOf edge from an ArrayType)
var arrayTypes = nodes(XCSG.ArrayType)
var typeOfEdges = nodes(XCSG.TypeOf)
var arrays = typeEdges.predecessors(arrayTypes)

// there are 109 arrays initialized in the code
show(arrays.nodes(XCSG.Initialization), "Initialized Arrays")

// select structures that contain arrays
var arrayStructTypes = arrays.containers().nodes(XCSG.C.Struct)
var typeDefEdges = edges(XCSG.AliasedType, XCSG.TypeOf)
var typeAliases = nodes(XCSG.TypeAlias)
var arrayStructs = typeDefEdges.reverse(arrayStructTypes).difference(arrayStructTypes, typeAliases)

// there are 7 structures containing arrays initialized in the code
show(arrayStructs.nodes(XCSG.Initialization), "Initialized Structures Containing Arrays")

// buffers are arrays and structures containing arrays
var buffers = arrays.union(arrayStructs)

// find buffers that are tainted by attacker controlled inputs (the network socket)
var sockets = nodes(XCSG.Field).selectNode(XCSG.name, "socket")
var taint = universe.edgesTaggedWithAny("control-dependence", "data-dependence")
var bufferStatements = buffers.containers().nodes(XCSG.ControlFlow_Node)
var taintedBufferStatements = taint.forward(sockets).intersection(bufferStatements)

// there are 87 tainted buffer statements
show(taintedBufferStatements, "Tainted Buffer Statements")

// find strcpy callsites that take tainted buffers
var invocationEdges = edges(XCSG.InvokedFunction)
var strcpyCallsites = invocationEdges.predecessors(strcpy)
var strcpyCallsiteStatements = strcpyCallsites.containers().nodes(XCSG.ControlFlow_Node)
var taintedStrcpyCallsites = taintedBufferStatements.intersection(strcpyCallsiteStatements)

// there are 17 tainted strcpy callsites
show(taintedStrcpyCallsites, "Tainted strcpy Callsites")

// find functions with tainted strcpy callsites that do not call strlen
var taintedStrcpyCallsiteFunctions = taintedStrcpyCallsites.containers().nodes(XCSG.Function)
var potentiallyVulnerableFunctions = taintedStrcpyCallsiteFunctions.difference(strlenCallers)
show(potentiallyVulnerableFunctions, "Potentially Vulnerable Functions")

// filter the tainted strcpy callsites to just the callsites in the potentially vulnerable function, there should only be 1 function left
var taintedStrcpyCallsitesInPotentiallyVulnerableFunctions = taintedStrcpyCallsites.intersection(potentiallyVulnerableFunctions.contained().nodes(XCSG.ControlFlow_Node))
show(taintedStrcpyCallsitesInPotentiallyVulnerableFunctions, "Potentially Vulnerable strcpy")

// print the line number of the potential vulnerability ([Filename: minishare\serve2.c (line 229)])
println(FormattedSourceCorrespondence.getSourceCorrespondents(taintedStrcpyCallsitesInPotentiallyVulnerableFunctions))
